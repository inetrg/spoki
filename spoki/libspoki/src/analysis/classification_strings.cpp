// clang-format off
// DO NOT EDIT: this file is auto-generated by generate-enum-strings.
// Run the target update-enum-strings if this file is out of sync.
#include "spoki/config.hpp"
#include "caf/string_view.hpp"

SPOKI_PUSH_DEPRECATED_WARNING

#include "spoki/analysis/classification.hpp"

#include <string>

namespace spoki::analysis {

std::string to_string(classification x) {
  switch(x) {
    default:
      return "???";
    case classification::unchecked:
      return "spoki::analysis::classification::unchecked";
    case classification::constant:
      return "spoki::analysis::classification::constant";
    case classification::random:
      return "spoki::analysis::classification::random";
    case classification::monotonic:
      return "spoki::analysis::classification::monotonic";
    case classification::other:
      return "spoki::analysis::classification::other";
  };
}

bool from_string(caf::string_view in, classification& out) {
  if (in == "spoki::analysis::classification::unchecked") {
    out = classification::unchecked;
    return true;
  } else if (in == "spoki::analysis::classification::constant") {
    out = classification::constant;
    return true;
  } else if (in == "spoki::analysis::classification::random") {
    out = classification::random;
    return true;
  } else if (in == "spoki::analysis::classification::monotonic") {
    out = classification::monotonic;
    return true;
  } else if (in == "spoki::analysis::classification::other") {
    out = classification::other;
    return true;
  } else {
    return false;
  }
}

bool from_integer(std::underlying_type_t<classification> in,
                  classification& out) {
  auto result = static_cast<classification>(in);
  switch(result) {
    default:
      return false;
    case classification::unchecked:
    case classification::constant:
    case classification::random:
    case classification::monotonic:
    case classification::other:
      out = result;
      return true;
  };
}

} // namespace spoki::analysis

SPOKI_POP_WARNINGS
