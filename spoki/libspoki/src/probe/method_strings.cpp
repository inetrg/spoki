// clang-format off
// DO NOT EDIT: this file is auto-generated by generate-enum-strings.
// Run the target update-enum-strings if this file is out of sync.
#include "spoki/config.hpp"
#include "caf/string_view.hpp"

SPOKI_PUSH_DEPRECATED_WARNING

#include "spoki/probe/method.hpp"

#include <string>

namespace spoki::probe {

std::string to_string(method x) {
  switch(x) {
    default:
      return "???";
    case method::icmp_echo:
      return "spoki::probe::method::icmp_echo";
    case method::icmp_time:
      return "spoki::probe::method::icmp_time";
    case method::tcp_syn:
      return "spoki::probe::method::tcp_syn";
    case method::tcp_ack:
      return "spoki::probe::method::tcp_ack";
    case method::tcp_ack_sport:
      return "spoki::probe::method::tcp_ack_sport";
    case method::tcp_synack:
      return "spoki::probe::method::tcp_synack";
    case method::tcp_rst:
      return "spoki::probe::method::tcp_rst";
    case method::udp:
      return "spoki::probe::method::udp";
    case method::udp_dport:
      return "spoki::probe::method::udp_dport";
  };
}

bool from_string(caf::string_view in, method& out) {
  if (in == "spoki::probe::method::icmp_echo") {
    out = method::icmp_echo;
    return true;
  } else if (in == "spoki::probe::method::icmp_time") {
    out = method::icmp_time;
    return true;
  } else if (in == "spoki::probe::method::tcp_syn") {
    out = method::tcp_syn;
    return true;
  } else if (in == "spoki::probe::method::tcp_ack") {
    out = method::tcp_ack;
    return true;
  } else if (in == "spoki::probe::method::tcp_ack_sport") {
    out = method::tcp_ack_sport;
    return true;
  } else if (in == "spoki::probe::method::tcp_synack") {
    out = method::tcp_synack;
    return true;
  } else if (in == "spoki::probe::method::tcp_rst") {
    out = method::tcp_rst;
    return true;
  } else if (in == "spoki::probe::method::udp") {
    out = method::udp;
    return true;
  } else if (in == "spoki::probe::method::udp_dport") {
    out = method::udp_dport;
    return true;
  } else {
    return false;
  }
}

bool from_integer(std::underlying_type_t<method> in,
                  method& out) {
  auto result = static_cast<method>(in);
  switch(result) {
    default:
      return false;
    case method::icmp_echo:
    case method::icmp_time:
    case method::tcp_syn:
    case method::tcp_ack:
    case method::tcp_ack_sport:
    case method::tcp_synack:
    case method::tcp_rst:
    case method::udp:
    case method::udp_dport:
      out = result;
      return true;
  };
}

} // namespace spoki::probe

SPOKI_POP_WARNINGS
