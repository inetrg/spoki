// clang-format off
// DO NOT EDIT: this file is auto-generated by generate-enum-strings.
// Run the target update-enum-strings if this file is out of sync.
#include "spoki/config.hpp"
#include "caf/string_view.hpp"

SPOKI_PUSH_DEPRECATED_WARNING

#include "spoki/scamper/ec.hpp"

#include <string>

namespace spoki::scamper {

std::string to_string(ec x) {
  switch(x) {
    default:
      return "???";
    case ec::success:
      return "spoki::scamper::ec::success";
    case ec::failed_to_connect:
      return "spoki::scamper::ec::failed_to_connect";
    case ec::failed_to_start_decoder:
      return "spoki::scamper::ec::failed_to_start_decoder";
  };
}

bool from_string(caf::string_view in, ec& out) {
  if (in == "spoki::scamper::ec::success") {
    out = ec::success;
    return true;
  } else if (in == "spoki::scamper::ec::failed_to_connect") {
    out = ec::failed_to_connect;
    return true;
  } else if (in == "spoki::scamper::ec::failed_to_start_decoder") {
    out = ec::failed_to_start_decoder;
    return true;
  } else {
    return false;
  }
}

bool from_integer(std::underlying_type_t<ec> in,
                  ec& out) {
  auto result = static_cast<ec>(in);
  switch(result) {
    default:
      return false;
    case ec::success:
    case ec::failed_to_connect:
    case ec::failed_to_start_decoder:
      out = result;
      return true;
  };
}

} // namespace spoki::scamper

SPOKI_POP_WARNINGS
