#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Reset state of the local Kafka instanct.

Example: ./mwkr [-p PORT]
"""

__maintainer__ = "Raphael Hiesgen"
__email__ = "raphael.hiesgen@haw-hamburg.de"
__copyright__ = "Copyright 2018-2021"

import click

from kafka import KafkaAdminClient, KafkaConsumer
from kafka.errors import UnknownTopicOrPartitionError


def delete_topics(port, topics):
    print("deleteing topics:")
    for topic in topics:
        print(f"> {topic}")
    adm = KafkaAdminClient(
        bootstrap_servers=[f"localhost:{port}"],
    )
    adm.delete_topics(topics)


def list_topics(port):
    consumer = KafkaConsumer(
        group_id="to.list.topics", bootstrap_servers=[f"localhost:{port}"]
    )
    print("available topics:")
    topics = consumer.topics()
    if len(topics) == 0:
        print("> no topics available")
    else:
        print(topics)
    return topics


@click.command()
@click.option(
    "-d",
    "--datasource",
    "datasources",
    type=str,
    default=None,
    required=True,
    multiple=True,
    help="match phases for this datasource",
)
@click.option(
    "-g",
    "--generic",
    is_flag=True,
    default=False,
)
@click.option(
    "-k",
    "--kafka-port",
    "kafka_port",
    type=int,
    default=9092,
    help="port of the local kafka server (default: 9092)",
)
def main(datasources, generic, kafka_port):

    topics = []
    for ds in datasources:
        topics.append(f"cse2.malware.events.{ds}")
        topics.append(f"cse2.malware.filtered.{ds}")
        topics.append(f"cse2.malware.cleaned.{ds}")
    if generic:
        topics.append("cse2.malware.events")
        topics.append("cse2.malware.filtered")
        topics.append("cse2.malware.cleaned")

    topics_to_delete = []

    available_topics = list_topics(kafka_port)
    try:
        for topic in topics:
            if topic in available_topics:
                topics_to_delete.append(topic)
            else:
                print(f"can't delete topic '{topic}' because it doesn't exist")
        if len(topics_to_delete) > 0:
            delete_topics(kafka_port, topics_to_delete)
        else:
            print("nothing to delete")
    except UnknownTopicOrPartitionError as e:
        print(f"Unkown topic or partion error: {e}")


if __name__ == "__main__":
    main()
