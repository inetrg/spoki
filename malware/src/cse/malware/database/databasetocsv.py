#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Convert json.gz database to CSV, written to stdout.
"""

__maintainer__ = "Raphael Hiesgen"
__email__ = "raphael.hiesgen@haw-hamburg.de"
__copyright__ = "Copyright 2018-2021"

import argparse
import gzip
import json
import os
import magic

from pathlib import Path


def get_filetype(hash):
    path = os.path.join("malware", hash, "malware.bin")
    if Path(path).is_file():
        return magic.from_file(path)
    else:
        print("file '{path}' does not exist")
        return ""


def main():
    parser = argparse.ArgumentParser(description="Convert JSON VT database to CSV.")
    parser.add_argument("input", type=str, default="database.json.gz")
    parser.add_argument("--require-vt", action="store_true")
    parser.add_argument("--exclude-vt", action="store_true")
    parser.add_argument("--file-type", action="store_true")

    args = parser.parse_args()

    if args.require_vt and args.exclude_vt:
        print(f"exclude and require vt are exclusive")
        return

    header = ["hash", "spoki.first", "vt.fist"]
    if args.file_type:
        header.append("file type")

    with gzip.open(args.input, "rt") as fh:
        objstr = fh.read()
        obj = json.loads(objstr)
        print("|".join(header))
        for hash, data in obj.items():
            row = [str(hash)]
            first = data["first"]
            row.append(str(first["spoki"]))

            # optional virustotal entry
            got_vt_entry = False
            if "vt" in first:
                got_vt_entry = True
                row.append(str(first["vt"]))
            else:
                row.append("")

            # file type
            if args.file_type:
                row.append(get_filetype(hash))

            # potentally print it
            if args.exclude_vt:
                if got_vt_entry:
                    continue
                else:
                    print("|".join(row))
            elif args.require_vt:
                if got_vt_entry:
                    print("|".join(row))
                else:
                    continue
            else:
                print("|".join(row))


if __name__ == "__main__":
    main()